// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
	Coin(ctx context.Context, opts ...grpc.CallOption) (ExchangeService_CoinClient, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, "/vote_service.ExchangeService/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) Coin(ctx context.Context, opts ...grpc.CallOption) (ExchangeService_CoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExchangeService_ServiceDesc.Streams[0], "/vote_service.ExchangeService/Coin", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeServiceCoinClient{stream}
	return x, nil
}

type ExchangeService_CoinClient interface {
	Send(*CoinExchangeRequest) error
	Recv() (*CoinExchangeResponse, error)
	grpc.ClientStream
}

type exchangeServiceCoinClient struct {
	grpc.ClientStream
}

func (x *exchangeServiceCoinClient) Send(m *CoinExchangeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangeServiceCoinClient) Recv() (*CoinExchangeResponse, error) {
	m := new(CoinExchangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations must embed UnimplementedExchangeServiceServer
// for forward compatibility
type ExchangeServiceServer interface {
	Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	Coin(ExchangeService_CoinServer) error
	mustEmbedUnimplementedExchangeServiceServer()
}

// UnimplementedExchangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServiceServer struct {
}

func (UnimplementedExchangeServiceServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedExchangeServiceServer) Coin(ExchangeService_CoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Coin not implemented")
}
func (UnimplementedExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote_service.ExchangeService/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_Coin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeServiceServer).Coin(&exchangeServiceCoinServer{stream})
}

type ExchangeService_CoinServer interface {
	Send(*CoinExchangeResponse) error
	Recv() (*CoinExchangeRequest, error)
	grpc.ServerStream
}

type exchangeServiceCoinServer struct {
	grpc.ServerStream
}

func (x *exchangeServiceCoinServer) Send(m *CoinExchangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangeServiceCoinServer) Recv() (*CoinExchangeRequest, error) {
	m := new(CoinExchangeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vote_service.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _ExchangeService_Exchange_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Coin",
			Handler:       _ExchangeService_Coin_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/exchange_service.proto",
}
